---
- name: Load AppRole credentials from artifacts (controller)
  delegate_to: localhost
  run_once: true
  ansible.builtin.include_vars:
    file: "{{ playbook_dir }}/artifacts/approle_credentials.yml"

# Container'ı temiz bir şekilde yeniden başlat
- name: Check if proxy-node container exists
  ansible.builtin.shell: docker ps -a --filter "name=^/proxy-node$" --format "{{ '{{' }}.Names{{ '}}' }}"
  register: container_check
  changed_when: false
  failed_when: false
  delegate_to: localhost
  run_once: true

- name: Stop and remove existing proxy-node container
  ansible.builtin.shell: |
    docker stop proxy-node || true
    docker rm proxy-node || true
  when: "'proxy-node' in container_check.stdout"
  delegate_to: localhost
  run_once: true

# Container'ı başlat ve içinde her şeyi kur
- name: Start NGINX container and setup everything inside
  ansible.builtin.shell: |
    docker run -d \
      --name proxy-node \
      --restart unless-stopped \
      --network hepsi_devops_net \
      -p 80:80 \
      -p 443:443 \
      -e VAULT_ADDR="{{ vault_url | default('http://vault-server:8200') }}" \
      -e VAULT_ROLE_ID="{{ approle_role_id }}" \
      -e VAULT_SECRET_ID="{{ approle_secret_id }}" \
      nginx:stable \
      sh -c "sleep infinity"
  register: container_start
  delegate_to: localhost
  run_once: true

- name: Install dependencies in container
  ansible.builtin.shell: |
    docker exec proxy-node sh -c "
      apt-get update && 
      apt-get install -y python3 curl unzip &&
      mkdir -p /etc/vault-agent.d /usr/local/bin
    "
  delegate_to: localhost
  run_once: true

- name: Download and install Vault binary in container
  ansible.builtin.shell: |
    docker exec proxy-node sh -c "
      curl -o /tmp/vault.zip https://releases.hashicorp.com/vault/1.17.2/vault_1.17.2_linux_amd64.zip &&
      cd /tmp && unzip vault.zip &&
      mv vault /usr/local/bin/vault &&
      chmod +x /usr/local/bin/vault
    "
  delegate_to: localhost
  run_once: true

- name: Create Vault Agent config in container
  ansible.builtin.shell: |
    docker exec proxy-node sh -c 'cat > /etc/vault-agent.d/agent.hcl << EOF
    pid_file = "/var/run/vault-agent.pid"

    vault {
      address = "http://vault-server:8200"
    }

    auto_auth {
      method "approle" {
        mount_path = "auth/approle"
        config = {
          role_id_file_path = "/etc/vault-agent.d/role_id"
          secret_id_file_path = "/etc/vault-agent.d/secret_id"
          remove_secret_id_file_after_read = false
        }
      }
    }

    template {
      source      = "/etc/vault-agent.d/htpasswd.ctmpl"
      destination = "/etc/nginx/htpasswd"
      perms       = "0644"
      command     = "nginx -s reload"
    }
    EOF'
  delegate_to: localhost
  run_once: true

- name: Create NGINX config in container
  ansible.builtin.shell: |
    docker exec proxy-node sh -c 'cat > /etc/nginx/conf.d/default.conf << EOF
    server {
      listen 80;
      server_name _;

      access_log /dev/stdout;
      error_log  /dev/stderr warn;

      
      location = /health {
        access_log off;
        auth_basic off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
      }

      # Vault health proxy: auth kapalı
      location = /vault/v1/sys/health {
        auth_basic off;
        proxy_pass http://vault-server:8200/v1/sys/health;
      }

      # Kök: auth açık + başarılıysa yönlendir
      location = / {
        auth_basic "Restricted Content";
        auth_basic_user_file /etc/nginx/htpasswd;
        try_files "" @redirect_hepsi;
      }
      location @redirect_hepsi {
        return 302 https://www.hepsiburada.com/;
      }
      }   
    EOF'
  delegate_to: localhost
  run_once: true

- name: Create entrypoint script in container
  ansible.builtin.shell: |
    docker exec proxy-node sh -c 'cat > /usr/local/bin/entrypoint.sh << EOF
    #!/bin/sh
    set -e

    echo "=== Starting Vault Agent + NGINX ==="

    ## AppRole kimlik bilgilerini dosyalara yaz
    #echo "{{ approle_role_id }}" > /etc/vault-agent.d/role_id
    #echo "{{ approle_secret_id }}" > /etc/vault-agent.d/secret_id
    echo "$VAULT_ROLE_ID" > /etc/vault-agent.d/role_id
    echo "$VAULT_SECRET_ID" > /etc/vault-agent.d/secret_id

    # Vault template dosyasını oluştur
    echo "{{ "{{" }} with secret \"secret/data/nginx_creds\" }}{{ "{{" }} .Data.data.credentials }}{{ "{{" }} end }}" > /etc/vault-agent.d/htpasswd.ctmpl

    # Geçici htpasswd dosyası oluştur (vault agent çalışmadan önce)
    echo "admin:\$apr1\$rF8zKmH.\$ZjEfKcKbsKOJ.8K3nW9PU0" > /etc/nginx/htpasswd

    # Vault server bekle
    echo "Waiting for Vault server..."
    until curl -s http://vault-server:8200/v1/sys/health > /dev/null 2>&1; do
        echo "Vault not ready, waiting 5 seconds..."
        sleep 5
    done
    echo "Vault server is available!"

    # Vault agent başlat
    echo "Starting Vault Agent..."
    /usr/local/bin/vault agent -config=/etc/vault-agent.d/agent.hcl &

    # NGINX başlat
    echo "Starting NGINX..."
    exec nginx -g "daemon off;"
    EOF'
  delegate_to: localhost
  run_once: true

- name: Make entrypoint executable and restart container
  ansible.builtin.shell: |
    docker exec proxy-node chmod +x /usr/local/bin/entrypoint.sh
    docker restart proxy-node
    sleep 2
    docker exec -d proxy-node /usr/local/bin/entrypoint.sh
  delegate_to: localhost
  run_once: true

- name: Wait for services to start
  ansible.builtin.pause:
    seconds: 15

- name: Check container status
  ansible.builtin.shell: docker ps --filter "name=^/proxy-node$" --format "{{ '{{' }}.Status{{ '}}' }}"
  register: container_status
  changed_when: false
  delegate_to: localhost
  run_once: true

- name: Get container logs
  ansible.builtin.shell: docker logs proxy-node --tail 30
  register: container_logs
  changed_when: false
  failed_when: false
  delegate_to: localhost
  run_once: true

- name: Display container logs
  ansible.builtin.debug:
    msg: "{{ container_logs.stdout_lines }}"

# Health check
- name: Test NGINX is responding
  ansible.builtin.uri:
    url: "http://127.0.0.1/health"
    method: GET
    status_code: [200]
  register: nginx_health_check
  failed_when: false
  delegate_to: localhost
  run_once: true

- name: Display health check result
  ansible.builtin.debug:
    msg: "NGINX health check - Status: {{ nginx_health_check.status | default('Failed') }}"

- name: Display final status
  ansible.builtin.debug:
    msg:
      - "Container created and configured"
      - "Vault binary installed"
      - "Vault Agent configuration created"
      - "NGINX configuration created"  
      - "Entrypoint script created and executed"
      - "AppRole ID: {{ approle_role_id }}"
      - "Container Status: {{ container_status.stdout }}"
---
# ---- Vars / defaults ----
- name: Set vault_url and token defaults
  ansible.builtin.set_fact:
    vault_url: "{{ vault_url | default(lookup('env','VAULT_ADDR') | default('http://127.0.0.1:8200')) }}"
    vault_token: "{{ vault_token | default(lookup('env','VAULT_TOKEN') | default('')) }}"
    vault_kv_mount: "{{ vault_kv_mount | default('secret') }}"
    vault_secret_path: "{{ vault_secret_path | default('nginx_creds') }}"

- name: Set artifacts directory
  ansible.builtin.set_fact:
    approle_creds_dir: "{{ playbook_dir }}/artifacts"
    approle_creds_file: "{{ playbook_dir }}/artifacts/approle_credentials.yml"

# ---- Safety checks ----
- name: Assert vault_token is provided
  ansible.builtin.assert:
    that:
      - vault_token is defined
      - vault_token | length > 0
    fail_msg: "vault_token tanımlı değil. VAULT_TOKEN env variable veya -e vault_token=xxx ile sağlayın."

- name: Debug vault connection info
  ansible.builtin.debug:
    msg:
      - "Vault URL: {{ vault_url }}"
      - "Vault Token: {{ vault_token[:8] }}..."
      - "KV Mount: {{ vault_kv_mount }}"
      - "Secret Path: {{ vault_secret_path }}"

# ---- Health check ----
- name: Wait for Vault to be ready
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/sys/health"
    method: GET
    status_code: [200, 429, 472, 473, 501, 503]
  register: vault_health_check
  retries: 10
  delay: 3
  until: vault_health_check.status in [200, 429, 472, 473]

- name: Display Vault health status
  ansible.builtin.debug:
    msg: "Vault health check - Status: {{ vault_health_check.status }}"



# ---- Write secret to Vault (KV v2) ----
- name: Write NGINX credentials secret to Vault
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/{{ vault_kv_mount }}/data/{{ vault_secret_path }}"
    method: POST
    headers: 
      X-Vault-Token: "{{ vault_token }}"
    body_format: json
    body:
      data:
        credentials: "hepsiburada:$apr1$.NRBAum.$tSPDjXPQKFQmwYJiGA3e4." #devops
        plain_credentials: "hepsiburada:devops"
        username: "hepsiburada"
        password: "devops"
    status_code: [200, 204]

- name: Verify secret was written
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/{{ vault_kv_mount }}/data/{{ vault_secret_path }}"
    method: GET
    headers:
      X-Vault-Token: "{{ vault_token }}"
    status_code: [200]
  register: secret_verify

- name: Debug secret verification
  ansible.builtin.debug:
    msg: "Secret successfully written and verified"

# ---- Create policy for AppRole ----
- name: Create read-only policy for NGINX credentials
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/sys/policies/acl/nginx-creds-readonly"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body_format: json
    body:
      policy: |
        path "{{ vault_kv_mount }}/data/{{ vault_secret_path }}" {
          capabilities = ["read"]
        }
        path "{{ vault_kv_mount }}/metadata/{{ vault_secret_path }}" {
          capabilities = ["read"]
        }
    status_code: [200, 204]

# ---- Enable AppRole auth method ----
- name: Enable AppRole auth method
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/sys/auth/approle"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body_format: json
    body:
      type: "approle"
    status_code: [200, 204, 400]
  failed_when: false

# ---- Create AppRole role ----
- name: Create AppRole role for nginx-app
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/auth/approle/role/nginx-app"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body_format: json
    body:
      policies: ["default", "nginx-creds-readonly"]
      token_ttl: "1h"
      token_max_ttl: "4h"
      bind_secret_id: true
      secret_id_ttl: "24h"
    status_code: [200, 204]

# ---- Get Role ID ----
- name: Get AppRole Role ID
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/auth/approle/role/nginx-app/role-id"
    method: GET
    headers:
      X-Vault-Token: "{{ vault_token }}"
    status_code: [200]
  register: approle_role_id_response

- name: Extract Role ID from response
  ansible.builtin.set_fact:
    approle_role_id: "{{ approle_role_id_response.json.data.role_id }}"

- name: Debug Role ID
  ansible.builtin.debug:
    msg: "AppRole Role ID: {{ approle_role_id }}"

# ---- Generate Secret ID ----
- name: Generate AppRole Secret ID
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/auth/approle/role/nginx-app/secret-id"
    method: POST
    headers:
      X-Vault-Token: "{{ vault_token }}"
    body_format: json
    body: {}
    status_code: [200]
  register: approle_secret_id_response

- name: Extract Secret ID from response
  ansible.builtin.set_fact:
    approle_secret_id: "{{ approle_secret_id_response.json.data.secret_id }}"

- name: Debug Secret ID
  ansible.builtin.debug:
    msg: "AppRole Secret ID: {{ approle_secret_id[:8] }}..."

# ---- Test AppRole login ----
- name: Test AppRole login with generated credentials
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/auth/approle/login"
    method: POST
    body_format: json
    body:
      role_id: "{{ approle_role_id }}"
      secret_id: "{{ approle_secret_id }}"
    status_code: [200]
  register: approle_login_test

- name: Extract AppRole token
  ansible.builtin.set_fact:
    approle_token: "{{ approle_login_test.json.auth.client_token }}"

- name: Debug AppRole login success
  ansible.builtin.debug:
    msg: "AppRole login successful. Token: {{ approle_token[:8] }}..."

# ---- Test secret reading with AppRole token ----
- name: Test reading secret with AppRole token
  ansible.builtin.uri:
    url: "{{ vault_url }}/v1/{{ vault_kv_mount }}/data/{{ vault_secret_path }}"
    method: GET
    headers:
      X-Vault-Token: "{{ approle_token }}"
    status_code: [200]
  register: secret_read_test

- name: Debug secret reading success
  ansible.builtin.debug:
    msg: "Secret successfully read with AppRole token"

# ---- Save credentials to artifacts ----
- name: Ensure artifacts directory exists
  delegate_to: localhost
  run_once: true
  ansible.builtin.file:
    path: "{{ approle_creds_dir }}"
    state: directory
    mode: "0755"

- name: Create timestamp fact
  delegate_to: localhost
  run_once: true
  ansible.builtin.set_fact:
    _timestamp: "{{ lookup('pipe', 'date -u +%Y-%m-%dT%H:%M:%SZ') }}"

- name: Save AppRole credentials to artifacts file
  delegate_to: localhost
  run_once: true
  ansible.builtin.copy:
    content: |
      # AppRole Credentials for NGINX Proxy
      # Generated:  {{ _timestamp }}
      approle_role_id: "{{ approle_role_id }}"
      approle_secret_id: "{{ approle_secret_id }}"
    dest: "{{ approle_creds_file }}"
    mode: "0600"

- name: Verify artifacts file was created
  delegate_to: localhost
  run_once: true
  ansible.builtin.stat:
    path: "{{ approle_creds_file }}"
  register: artifacts_file_stat

- name: Display final status
  ansible.builtin.debug:
    msg:
      - "Vault health check passed"
      - "NGINX credentials stored at {{ vault_kv_mount }}/data/{{ vault_secret_path }}"
      - "Policy 'nginx-creds-readonly' created"
      - "AppRole auth method enabled"
      - "AppRole role 'nginx-app' created"
      - "Role ID generated: {{ approle_role_id }}"
      - "Secret ID generated: {{ approle_secret_id[:8] }}..."
      - "AppRole login test passed"
      - "Secret read test passed"
      - "Credentials saved to {{ approle_creds_file }}"
      - "Artifacts file size: {{ artifacts_file_stat.stat.size }} bytes"